AWSTemplateFormatVersion: 2010-09-09

Description: >-
  The CloudFormation template that deploys a pipeline and all relevant
  resources.

Parameters:
  StagePrefix:
    Type: String
    Default: dev
  GithubUsername:
    Type: String
    Default: claranet
  GithubRepository:
    Type: String
    Default: cloud-phoenix-kata
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: <GITHUB_ACCESS_TOKEN>
  MongoDBMasterUsername:
    Type: String
    Default: documentdb
  MongoDBMasterPassword:
    Type: String
    Default: documentdb
    NoEcho: true
  MongoDBPort:
    Type: String
    Default: 27017
  ContainerPort:
    Type: Number
    Default: 8080
  MinRunningTasks:
    Type: Number
    Default: 3
  MaxRunningTasks:
    Type: Number
    Default: 6
  AutoScalingTargetValue:
    Type: Number
    Default: 50

Resources:

  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${StagePrefix}-${AWS::AccountId}-repository'
  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StagePrefix}-${AWS::AccountId}-${AWS::Region}-bucket'
  
  CodePipeLineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  
  CodeBuildExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  
  CloudformationExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  
  BuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:2.0'
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub >-
              ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
      Name: !Sub '${StagePrefix}-${AWS::AccountId}-buildproject'
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
  
  CodePipeLine:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: S3Bucket
    Properties:
      ArtifactStore:
        Location: !Sub '${StagePrefix}-${AWS::AccountId}-${AWS::Region}-bucket'
        Type: S3
      Name: !Sub '${StagePrefix}-${AWS::AccountId}-codepipeline'
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt 
        - CodePipeLineExecutionRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Repo: !Ref GithubRepository
                Branch: !Ref GithubBranch
                Owner: !Ref GithubUsername
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
              OutputArtifacts:
                - Name: source-output-artifacts
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: build-output-artifacts
              InputArtifacts:
                - Name: source-output-artifacts
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              InputArtifacts:
                - Name: source-output-artifacts
                - Name: build-output-artifacts
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "DockerImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "StagePrefix":  "${StagePrefix}",
                    "ContainerPort": "${ContainerPort}",
                    "MongoDBMasterUsername": "${MongoDBMasterUsername}",
                    "MongoDBMasterPassword": "${MongoDBMasterPassword}",
                    "MongoDBPort": "${MongoDBPort}",
                    "MinRunningTasks": "${MinRunningTasks}",
                    "MaxRunningTasks": "${MaxRunningTasks}",
                    "AutoScalingTargetValue": "${AutoScalingTargetValue}"
                  }
                RoleArn: !GetAtt 
                  - CloudformationExecutionRole
                  - Arn
                StackName: !Sub '${StagePrefix}-${AWS::AccountId}-infrastructure'
                TemplatePath: 'source-output-artifacts::CloudFormation/Infrastructure.yml'
              RunOrder: 1
